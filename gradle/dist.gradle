javadoc {
    classpath = configurations.compileClasspath
    title = "${project.name} API Documentation $version"
    failOnError = true
    source = sourceSets.main.allJava
    options.optionFiles = [file("gradle/javadoc.options")]
}
tasks.register('copyJavadocToDist', Copy) {
    includeEmptyDirs = false
    from javadoc
    into "${layout.buildDirectory.get()}/${project.name}/doc"
    dependsOn javadoc
}
tasks.register('copyDocAndConfigFilesToDist', Copy) {
    includeEmptyDirs = false
    from('src/main/resources') { include '*-template.yaml' }
    from('.') { include 'README.md' }
    into "${layout.buildDirectory.get()}/${project.name}"
}
tasks.register('copySbomToDist', Copy) {
    from('build/reports') { include 'bom.*' }
    into "${layout.buildDirectory.get()}/${project.name}/sbom"
    dependsOn cyclonedxBom
}
tasks.register('copyLibsToDist', Copy) {
    includeEmptyDirs = false
    from jar
    include '**/*.jar'
    exclude "${project.name}*.jar"
    from sourceSets.main.runtimeClasspath
    into "${layout.buildDirectory.get()}/${project.name}/lib"
    dependsOn jar, copyDocAndConfigFilesToDist, copyJavadocToDist, copySbomToDist
}
tasks.register('copyMainLibToDist', Copy) {
    includeEmptyDirs = false
    from jar
    include "${project.name}*.jar"
    from sourceSets.main.runtimeClasspath
    into "${layout.buildDirectory.get()}/${project.name}"
    dependsOn jar, copyDocAndConfigFilesToDist, copyJavadocToDist, copySbomToDist
}
tasks.register('dist', Zip) {
    group = 'build'
    description("Creates the ${project.name}.zip with all jars")
    from("${layout.buildDirectory.get()}") {
        include "${project.name}/**"
    }
    archiveFileName = "${layout.buildDirectory.get()}/${project.name}.zip"
    dependsOn copyLibsToDist, copyMainLibToDist, copyDocAndConfigFilesToDist, copyJavadocToDist, copySbomToDist
}

